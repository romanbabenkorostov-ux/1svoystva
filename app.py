# src/14_recommend_smart.py
import numpy as np
import joblib
import os
import itertools
from tabulate import tabulate

# === –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ Streamlit ===
def is_streamlit():
    try:
        import streamlit as st
        return hasattr(st, 'runtime') and st.runtime.exists()
    except:
        return False

# === –ü—É—Ç–∏ ===
# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ Streamlit Cloud
if os.path.exists('models/soil_predictor.pkl'):
    # –ï—Å–ª–∏ app.py –≤ –∫–æ—Ä–Ω–µ (Streamlit Cloud)
    model_path = 'models/soil_predictor.pkl'
elif os.path.exists('../models/soil_predictor.pkl'):
    # –ï—Å–ª–∏ app.py –≤ –ø–∞–ø–∫–µ src
    model_path = '../models/soil_predictor.pkl'
else:
    # –ü–æ–∏—Å–∫ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    model_path = os.path.join(project_root, 'models', 'soil_predictor.pkl')

print(f"[DEBUG] –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏ –ø–æ –ø—É—Ç–∏: {model_path}")
print(f"[DEBUG] –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
print(f"[DEBUG] –§–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir('.')}")

if not os.path.exists(model_path):
    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª—å –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ
    possible_paths = [
        'soil_predictor.pkl',
        'models/soil_predictor.pkl',
        '../models/soil_predictor.pkl',
        '../../models/soil_predictor.pkl'
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            model_path = path
            print(f"[DEBUG] –ú–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
            break
    else:
        raise FileNotFoundError(
            f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n"
            f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}\n"
            f"–ò—Å–∫–∞–ª–∏ –≤: {possible_paths}\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã: {os.listdir('.')}"
        )

model = joblib.load(model_path)
print(f"[DEBUG] –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {model_path}")

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ===
PARAMS = ['–°–æ—Ä–≥.%', '–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å', '–ú–∏–Ω. N']
action_names = ['–†–∞—Å—Ç–µ–Ω–∏—è', '–ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ', '–ë–∏–æ—á–∞—Ä', '–ù–∏—Ç—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã', '–ü–ê–£-–¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã']
combos = list(itertools.product([0, 1], repeat=5))

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ===
def predict(combo):
    X = np.array([combo])
    pred = model.predict(X)[0]
    return {
        '–°–æ—Ä–≥.%': round(pred[0], 2),
        '–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å': round(pred[1], 2),
        '–ú–∏–Ω. N': round(pred[2], 1)
    }

# === –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ===
all_variants = [(combo, predict(combo)) for combo in combos]

# === –£–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω ===
def get_range(values):
    if not values:
        return "‚Äî"
    vals = sorted(set(values))
    if len(vals) == 1:
        return f"{vals[0]:.1f}".rstrip('0').rstrip('.') if vals[0] % 1 else f"{int(vals[0])}"
    
    intervals = []
    start = prev = vals[0]
    for v in vals[1:]:
        if abs(v - prev) > 0.05:
            intervals.append(format_interval(start, prev))
            start = v
        prev = v
    intervals.append(format_interval(start, prev))
    return "; ".join(intervals)

def format_interval(start, end):
    if abs(start - end) < 0.01:
        return f"{start:.1f}".rstrip('0').rstrip('.') if start % 1 else f"{int(start)}"
    else:
        s = f"{start:.1f}".rstrip('0').rstrip('.') if start % 1 else f"{int(start)}"
        e = f"{end:.1f}".rstrip('0').rstrip('.') if end % 1 else f"{int(end)}"
        return f"{s}‚Äì{e}"

# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ===
def filter_variants(variants, param, target, tolerance=0.15):
    filtered = [v for v in variants if abs(v[1][param] - target) <= tolerance * max(1, abs(target))]
    print(f"[DEBUG] –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è {param}={target}: {len(variants)} ‚Üí {len(filtered)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    return filtered

# === –¢–æ–ø-3 ===
def get_top3(variants, targets):
    return sorted(
        [(sum(abs(pred[p] - targets.get(p, pred[p])) for p in PARAMS), combo, pred)
         for combo, pred in variants]
    )[:3]

# === –ü–æ–ª—É—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ===
def get_param_ranges(variants):
    ranges = {}
    for param in PARAMS:
        vals = [v[1][param] for v in variants]
        if vals:
            ranges[param] = {
                'min': min(vals),
                'max': max(vals),
                'values': sorted(set(vals)),
                'range_str': get_range(vals)
            }
    print(f"[DEBUG] –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
    for p, r in ranges.items():
        print(f"  {p}: {r['range_str']}")
    return ranges

# === –ö–û–ù–°–û–õ–¨–ù–´–ô –†–ï–ñ–ò–ú ===
def console_mode():
    current_variants = all_variants.copy()
    targets = {}
    remaining_params = PARAMS.copy()

    print("–°–ò–°–¢–ï–ú–ê –£–ú–ù–û–ô –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 70)

    while remaining_params:
        print(f"\n–î–û–°–¢–£–ü–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ({len(current_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤):")
        print("-" * 50)
        
        ranges = get_param_ranges(current_variants)
        
        for i, p in enumerate(remaining_params, 1):
            print(f"[{i}] {p} ‚Üí [{ranges[p]['range_str']}]")

        choice = input("\n–ù–æ–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–∏–ª–∏ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ").strip()
        if not choice:
            break

        try:
            idx = int(choice) - 1
            if not (0 <= idx < len(remaining_params)):
                raise ValueError
            param = remaining_params[idx]
        except:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
            continue

        target_input = input(f"–¶–µ–ª—å {param} [{ranges[param]['range_str']}]: ").strip()
        if not target_input:
            remaining_params.pop(idx)
            continue

        try:
            target = float(target_input)
            min_v, max_v = ranges[param]['min'], ranges[param]['max']
            if target < min_v or target > max_v:
                target = max(min_v, min(target, max_v))
                print(f"[INFO] –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ: {target:.2f}")
        except:
            print("–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ!")
            continue

        targets[param] = target
        current_variants = filter_variants(current_variants, param, target)
        
        if not current_variants:
            print("[ERROR] –ù–ï–í–û–ó–ú–û–ñ–ù–û! –ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.")
            break

        remaining_params.pop(idx)

        top3 = get_top3(current_variants, targets)
        print("\n–¢–û–ü-3 –í–ê–†–ò–ê–ù–¢–ê:")
        table = [[f"{pred[p]:.2f}" if p != '–ú–∏–Ω. N' else f"{pred[p]:.1f}" for p in PARAMS] for _, _, pred in top3]
        print(tabulate(table, headers=PARAMS, tablefmt="grid"))
        print()
        for i, (_, combo, pred) in enumerate(top3, 1):
            actions = " | ".join(f"{k}: {'–¥–∞' if v else '–Ω–µ—Ç'}" for k, v in zip(action_names, combo))
            print(f"#{i}: {actions}")
        print()

    if current_variants:
        best_combo, best_pred = min(current_variants, key=lambda x: sum(abs(x[1][p] - targets.get(p, x[1][p])) for p in PARAMS))
        print("\n–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
        actions = " | ".join(f"{k}: {'–¥–∞' if v else '–Ω–µ—Ç'}" for k, v in zip(action_names, best_combo))
        print(actions)
        print({k: f"{v:.2f}" if k != '–ú–∏–Ω. N' else f"{v:.1f}" for k, v in best_pred.items()})
    else:
        print("–¶–µ–ª—å –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–∞.")

# === –í–ï–ë-–†–ï–ñ–ò–ú (Streamlit) ===
def web_mode():
    import streamlit as st
    import pandas as pd
    
    st.set_page_config(page_title="–ü–æ—á–≤–µ–Ω–Ω—ã–π –ò–ò", layout="centered")
    st.title("üå± –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –ø–æ—á–≤ –ø–æ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∞–≥—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'current_variants' not in st.session_state:
        with st.spinner('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Ä–∞—Å—á—ë—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...'):
            st.session_state.current_variants = all_variants.copy()
            st.session_state.targets = {}
            st.session_state.selected_param = None
            st.session_state.step = 0
            print(f"[DEBUG WEB] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {len(all_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

    current_variants = st.session_state.current_variants
    targets = st.session_state.targets
    remaining_params = [p for p in PARAMS if p not in targets]

    print(f"[DEBUG WEB] –®–∞–≥ {st.session_state.step}: {len(current_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –æ—Å—Ç–∞–ª–æ—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {remaining_params}")

    # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if not remaining_params:
        st.success("‚úÖ –ì–û–¢–û–í–û! –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã")
        top3 = get_top3(current_variants, targets)
        
        print("[DEBUG WEB] –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–ø-3:")
        for i, (score, combo, pred) in enumerate(top3, 1):
            print(f"  #{i}: score={score:.2f}, pred={pred}")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–ø-3
        st.markdown("### üèÜ –¢–û–ü-3 –í–ê–†–ò–ê–ù–¢–ê:")
        table_data = []
        for i, (_, combo, pred) in enumerate(top3, 1):
            table_data.append({
                '#': i,
                '–°–æ—Ä–≥.%': f"{pred['–°–æ—Ä–≥.%']:.2f}",
                '–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å': f"{pred['–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å']:.2f}",
                '–ú–∏–Ω. N': f"{pred['–ú–∏–Ω. N']:.1f}"
            })
        
        df = pd.DataFrame(table_data)
        st.dataframe(df, hide_index=True, width='stretch')
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        st.markdown("---")
        for i, (_, combo, pred) in enumerate(top3, 1):
            actions = " | ".join(f"**{k}**: {'–¥–∞' if v else '–Ω–µ—Ç'}" for k, v in zip(action_names, combo))
            st.markdown(f"**#{i}:** {actions}")
        
        st.markdown("---")
        
        # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        for i, (_, combo, pred) in enumerate(top3, 1):
            with st.expander(f"üî¨ –î–µ—Ç–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {i}"):
                cols = st.columns(5)
                for j, (name, val) in enumerate(zip(action_names, combo)):
                    emoji = "‚úÖ" if val else "‚ùå"
                    cols[j].markdown(f"**{name}**<br>{emoji}", unsafe_allow_html=True)
                
                st.divider()
                col1, col2, col3 = st.columns(3)
                col1.metric("–°–æ—Ä–≥.%", f"{pred['–°–æ—Ä–≥.%']:.2f}")
                col2.metric("–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å", f"{pred['–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å']:.2f}")
                col3.metric("–ú–∏–Ω. N", f"{pred['–ú–∏–Ω. N']:.1f}")
        
        if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", type="primary"):
            st.session_state.clear()
            st.rerun()
        return

    # –®–ê–ì 1: –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    if st.session_state.selected_param is None:
        st.markdown(f"### –®–∞–≥ {st.session_state.step + 1} –∏–∑ {len(PARAMS)}: –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")
        st.info(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: **{len(current_variants)}**")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Å—á—ë—Ç–µ
        with st.spinner('üîÑ –†–∞—Å—á—ë—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤...'):
            ranges = get_param_ranges(current_variants)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        cols = st.columns(len(remaining_params))
        for i, param in enumerate(remaining_params):
            with cols[i]:
                st.markdown(f"**{param}**")
                st.caption(f"–î–∏–∞–ø–∞–∑–æ–Ω: {ranges[param]['range_str']}")
                if st.button(f"–í—ã–±—Ä–∞—Ç—å", key=f"btn_{param}", width='stretch'):
                    st.session_state.selected_param = param
                    print(f"[DEBUG WEB] –í—ã–±—Ä–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}")
                    st.rerun()
        
        st.progress(st.session_state.step / len(PARAMS))
        return

    # –®–ê–ì 2: –í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    param = st.session_state.selected_param
    ranges = get_param_ranges(current_variants)
    param_range = ranges[param]
    
    st.markdown(f"### –®–∞–≥ {st.session_state.step + 1} –∏–∑ {len(PARAMS)}: {param}")
    st.info(f"üìä **–î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω:** `{param_range['range_str']}`")
    
    min_v = param_range['min']
    max_v = param_range['max']
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç min = max
    if abs(max_v - min_v) < 0.01:
        st.warning(f"‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: **{min_v:.2f}**")
        
        col1, col2 = st.columns(2)
        
        if col1.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ", type="primary", width='stretch'):
            print(f"[DEBUG WEB] –ü—Ä–∏–º–µ–Ω—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {param}={min_v}")
            
            with st.spinner(f'üîÑ –ü–µ—Ä–µ—Å—á—ë—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è {param} = {min_v}...'):
                targets[param] = min_v
                new_variants = filter_variants(current_variants, param, min_v)
            
            st.session_state.current_variants = new_variants
            st.session_state.targets = targets
            st.session_state.selected_param = None
            st.session_state.step += 1
            st.success(f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(new_variants)}")
            st.rerun()
        
        if col2.button("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä", width='stretch'):
            st.session_state.selected_param = None
            st.session_state.step += 1
            st.rerun()
        return
    
    step = 0.1 if param != '–ú–∏–Ω. N' else 0.5
    target = st.slider(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
        min_value=float(min_v),
        max_value=float(max_v),
        value=float((min_v + max_v) / 2),
        step=float(step),
        key=f"slider_{param}_{st.session_state.step}"
    )

    col1, col2, col3 = st.columns(3)
    
    if col1.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", type="primary", width='stretch'):
        print(f"[DEBUG WEB] –ü—Ä–∏–º–µ–Ω—è–µ–º {param}={target}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        with st.spinner(f'üîÑ –ü–µ—Ä–µ—Å—á—ë—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è {param} = {target}...'):
            targets[param] = target
            new_variants = filter_variants(current_variants, param, target)
        
        if not new_variants:
            st.error("‚ö†Ô∏è –° —Ç–∞–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.")
        else:
            st.session_state.current_variants = new_variants
            st.session_state.targets = targets
            st.session_state.selected_param = None
            st.session_state.step += 1
            st.success(f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(new_variants)}")
            st.rerun()

    if col2.button("üîô –î—Ä—É–≥–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä", width='stretch'):
        st.session_state.selected_param = None
        st.rerun()
    
    if col3.button("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", width='stretch'):
        st.session_state.selected_param = None
        st.session_state.step += 1
        st.rerun()

    # –ü—Ä–æ–≥—Ä–µ—Å—Å
    st.progress(st.session_state.step / len(PARAMS))

# === –ó–ê–ü–£–°–ö ===
if __name__ == '__main__':
    if is_streamlit():
        web_mode()
    else:
        console_mode()
